
================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference Point and LineSegment)
********************************************************************************

Testing correctness of BruteCollinearPoints
*-----------------------------------------------------------
Running 17 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - no 5 (or more) points are collinear
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (20000, 21000) -> (6000, 7000)
    - reference segment 1: (3000, 4000) -> (6000, 7000) -> (14000, 15000) -> (20000, 21000)

    - number of entries in student   solution: 2
    - number of entries in reference solution: 2
    - 2 extra entries in student solution, including: '(20000, 21000) -> (6000, 7000)'
    - 2 missing entries in student solution, including: '(3000, 4000) -> (6000, 7000) -> (14000, 15000) -> (20000, 21000)'

  * filename = equidistant.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (13000, 0) -> (9000, 6000)
    - reference segment 0: (13000, 0) -> (11000, 3000) -> (9000, 6000) -> (5000, 12000)

    - number of entries in student   solution: 4
    - number of entries in reference solution: 4
    - 3 extra entries in student solution, including: '(10000, 20000) -> (20000, 10000)'
    - 3 missing entries in student solution, including: '(30000, 0) -> (20000, 10000) -> (10000, 20000) -> (0, 30000)'

  * filename = input40.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (28000, 29000) -> (4000, 29000)
    - reference segment 2: (2000, 29000) -> (4000, 29000) -> (22000, 29000) -> (28000, 29000)

    - number of entries in student   solution: 4
    - number of entries in reference solution: 4
    - 4 extra entries in student solution, including: '(28000, 29000) -> (4000, 29000)'
    - 4 missing entries in student solution, including: '(2000, 29000) -> (4000, 29000) -> (22000, 29000) -> (28000, 29000)'

  * filename = input48.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (9000, 26000) -> (1000, 26000)
    - reference segment 1: (1000, 26000) -> (9000, 26000) -> (11000, 26000) -> (18000, 26000)

    - number of entries in student   solution: 6
    - number of entries in reference solution: 6
    - 6 extra entries in student solution, including: '(9000, 26000) -> (1000, 26000)'
    - 6 missing entries in student solution, including: '(1000, 26000) -> (9000, 26000) -> (11000, 26000) -> (18000, 26000)'

==> FAILED

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (10375, 12711) -> (18177, 12711)
    - reference segment 3: (10375, 12711) -> (14226, 12711) -> (18177, 12711) -> (20385, 12711)

    - number of entries in student   solution: 5
    - number of entries in reference solution: 5
    - 4 extra entries in student solution, including: '(7453, 14118) -> (5067, 14118)'
    - 4 missing entries in student solution, including: '(2682, 14118) -> (5067, 14118) -> (7453, 14118) -> (7821, 14118)'

  * filename = horizontal25.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (15472, 15282) -> (12774, 15282)
    - reference segment 15: (12774, 15282) -> (15472, 15282) -> (15884, 15282) -> (20732, 15282)

    - number of entries in student   solution: 25
    - number of entries in reference solution: 25
    - 22 extra entries in student solution, including: '(16352, 20913) -> (8784, 20913)'
    - 22 missing entries in student solution, including: '(8784, 20913) -> (9880, 20913) -> (16352, 20913) -> (19666, 20913)'

==> FAILED

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (10475, 13843) -> (16754, 13843)
    - reference segment 0: (10475, 13843) -> (16754, 13843) -> (19419, 13843) -> (20020, 13843)

    - number of entries in student   solution: 1
    - number of entries in reference solution: 1
    - 1 extra entry in student solution: '(10475, 13843) -> (16754, 13843)'
    - 1 missing entry in student solution: '(10475, 13843) -> (16754, 13843) -> (19419, 13843) -> (20020, 13843)'

    - failed on trial 1 of 500
     4
     10475 13843
     20020 13843
     19419 13843
     16754 13843

  *  5 random horizontal line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (4186, 4367) -> (13869, 4367)
    - reference segment 0: (1060, 4367) -> (4186, 4367) -> (9487, 4367) -> (13869, 4367)

    - number of entries in student   solution: 5
    - number of entries in reference solution: 5
    - 3 extra entries in student solution, including: '(15584, 13359) -> (17871, 13359)'
    - 3 missing entries in student solution, including: '(15584, 13359) -> (17871, 13359) -> (18710, 13359) -> (19662, 13359)'

    - failed on trial 1 of 250
     20
     15584 13359
      3063 20263
      5912  7484
     18290 20263
      8274 20263
     13876  7484
     20781  7484
      4186  4367
      9487  4367
     18533 15505
     17712 15505
     19662 13359
      1060  4367
     18710 13359
     17871 13359
     10852 15505
     13869  4367
     20301 20263
      3465  7484
     10786 15505

  * 10 random horizontal line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (15478, 5194) -> (19402, 5194)
    - reference segment 6: (1078, 5194) -> (11619, 5194) -> (15478, 5194) -> (19402, 5194)

    - number of entries in student   solution: 10
    - number of entries in reference solution: 10
    - 10 extra entries in student solution, including: '(5901, 15294) -> (5811, 15294)'
    - 10 missing entries in student solution, including: '(1544, 15294) -> (5811, 15294) -> (5901, 15294) -> (7094, 15294)'

    - failed on trial 1 of 50

  * 15 random horizontal line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (2831, 17521) -> (15865, 17521)
    - reference segment 12: (2831, 17521) -> (15865, 17521) -> (18182, 17521) -> (19929, 17521)

    - number of entries in student   solution: 15
    - number of entries in reference solution: 15
    - 12 extra entries in student solution, including: '(4442, 19240) -> (16509, 19240)'
    - 12 missing entries in student solution, including: '(2800, 19240) -> (4442, 19240) -> (10659, 19240) -> (16509, 19240)'

    - failed on trial 1 of 5

==> FAILED

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (8421, 15144) -> (8421, 18715)
    - reference segment 2: (8421, 1829) -> (8421, 11344) -> (8421, 15144) -> (8421, 18715)

    - number of entries in student   solution: 5
    - number of entries in reference solution: 5
    - 5 extra entries in student solution, including: '(14407, 19953) -> (14407, 17188)'
    - 5 missing entries in student solution, including: '(14407, 10367) -> (14407, 17188) -> (14407, 17831) -> (14407, 19953)'

  * filename = vertical25.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (19953, 20439) -> (19953, 10688)
    - reference segment 23: (19953, 10489) -> (19953, 10688) -> (19953, 19299) -> (19953, 20439)

    - number of entries in student   solution: 25
    - number of entries in reference solution: 25
    - 22 extra entries in student solution, including: '(9557, 18873) -> (9557, 20238)'
    - 22 missing entries in student solution, including: '(19953, 10489) -> (19953, 10688) -> (19953, 19299) -> (19953, 20439)'

==> FAILED

Test 3b: random vertical line segments
  *  1 random vertical line segment
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (9570, 12359) -> (9570, 16194)
    - reference segment 0: (9570, 12359) -> (9570, 15077) -> (9570, 16194) -> (9570, 18359)

    - number of entries in student   solution: 1
    - number of entries in reference solution: 1
    - 1 extra entry in student solution: '(9570, 12359) -> (9570, 16194)'
    - 1 missing entry in student solution: '(9570, 12359) -> (9570, 15077) -> (9570, 16194) -> (9570, 18359)'

    - failed on trial 1 of 500
     4
      9570 12359
      9570 18359
      9570 15077
      9570 16194

  *  5 random vertical line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (6180, 16847) -> (6180, 17965)
    - reference segment 0: (6180, 7164) -> (6180, 7455) -> (6180, 16847) -> (6180, 17965)

    - number of entries in student   solution: 5
    - number of entries in reference solution: 5
    - 4 extra entries in student solution, including: '(6180, 16847) -> (6180, 17965)'
    - 4 missing entries in student solution, including: '(17012, 9403) -> (17012, 9893) -> (17012, 16457) -> (17012, 18630)'

    - failed on trial 1 of 250
     20
     10669 18314
     15858  3576
     17012  9403
     17483 18306
     17483  1823
     17483  9286
      6180 16847
     17012 18630
     17012 16457
     17483  7223
     10669 11885
     10669  9302
     17012  9893
      6180  7455
      6180  7164
     15858  1138
     10669  1738
     15858 19034
      6180 17965
     15858 20259

  * 10 random vertical line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (9356, 17285) -> (9356, 15975)
    - reference segment 4: (9356, 2393) -> (9356, 3713) -> (9356, 15975) -> (9356, 17285)

    - number of entries in student   solution: 10
    - number of entries in reference solution: 10
    - 9 extra entries in student solution, including: '(9356, 17285) -> (9356, 15975)'
    - 9 missing entries in student solution, including: '(18754, 8650) -> (18754, 10162) -> (18754, 17132) -> (18754, 17479)'

    - failed on trial 1 of 50

  * 15 random vertical line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (19610, 6710) -> (19610, 11829)
    - reference segment 14: (19610, 5155) -> (19610, 6710) -> (19610, 6996) -> (19610, 11829)

    - number of entries in student   solution: 15
    - number of entries in reference solution: 15
    - 12 extra entries in student solution, including: '(17729, 18643) -> (17729, 19558)'
    - 12 missing entries in student solution, including: '(1762, 11330) -> (1762, 13188) -> (1762, 16450) -> (1762, 16669)'

    - failed on trial 1 of 5

==> FAILED

Test 4a: points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
==> passed

Test 4b: random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==> passed

Test 5: points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt
  * filename = input3.txt
==> passed

Test 6: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (13000, 0) -> (9000, 6000)
    - reference segment 0: (13000, 0) -> (11000, 3000) -> (9000, 6000) -> (5000, 12000)

    - number of entries in student   solution: 4
    - number of entries in reference solution: 4
    - 3 extra entries in student solution, including: '(10000, 20000) -> (20000, 10000)'
    - 3 missing entries in student solution, including: '(30000, 0) -> (20000, 10000) -> (10000, 20000) -> (0, 30000)'

  * filename = input40.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (28000, 29000) -> (4000, 29000)
    - reference segment 2: (2000, 29000) -> (4000, 29000) -> (22000, 29000) -> (28000, 29000)

    - number of entries in student   solution: 4
    - number of entries in reference solution: 4
    - 4 extra entries in student solution, including: '(28000, 29000) -> (4000, 29000)'
    - 4 missing entries in student solution, including: '(2000, 29000) -> (4000, 29000) -> (22000, 29000) -> (28000, 29000)'

  * filename = input48.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (9000, 26000) -> (1000, 26000)
    - reference segment 1: (1000, 26000) -> (9000, 26000) -> (11000, 26000) -> (18000, 26000)

    - number of entries in student   solution: 6
    - number of entries in reference solution: 6
    - 6 extra entries in student solution, including: '(9000, 26000) -> (1000, 26000)'
    - 6 missing entries in student solution, including: '(1000, 26000) -> (9000, 26000) -> (11000, 26000) -> (18000, 26000)'

==> FAILED

Test 7: check for fragile dependence on return value of toString()
  * filename = equidistant.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (13000, 0) -> (9000, 6000)
    - reference segment 0: (13000, 0) -> (11000, 3000) -> (9000, 6000) -> (5000, 12000)

    - number of entries in student   solution: 4
    - number of entries in reference solution: 4
    - 3 extra entries in student solution, including: '(10000, 20000) -> (20000, 10000)'
    - 3 missing entries in student solution, including: '(30000, 0) -> (20000, 10000) -> (10000, 20000) -> (0, 30000)'

  * filename = input40.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (28000, 29000) -> (4000, 29000)
    - reference segment 2: (2000, 29000) -> (4000, 29000) -> (22000, 29000) -> (28000, 29000)

    - number of entries in student   solution: 4
    - number of entries in reference solution: 4
    - 4 extra entries in student solution, including: '(28000, 29000) -> (4000, 29000)'
    - 4 missing entries in student solution, including: '(2000, 29000) -> (4000, 29000) -> (22000, 29000) -> (28000, 29000)'

  * filename = input48.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (9000, 26000) -> (1000, 26000)
    - reference segment 1: (1000, 26000) -> (9000, 26000) -> (11000, 26000) -> (18000, 26000)

    - number of entries in student   solution: 6
    - number of entries in reference solution: 6
    - 6 extra entries in student solution, including: '(9000, 26000) -> (1000, 26000)'
    - 6 missing entries in student solution, including: '(1000, 26000) -> (9000, 26000) -> (11000, 26000) -> (18000, 26000)'


It is bad style to write code that depends on the particular format of
the output from the toString() method, especially if your reason for
doing so is to circumvent the public API (which intentionally does not
provide access to the x- and y-coordinates).

==> FAILED

Test 8: random line segments, none vertical or horizontal
  *  1 random line segment
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (9013, 827) -> (17963, 20777)
    - reference segment 0: (8655, 29) -> (9013, 827) -> (12235, 8009) -> (17963, 20777)

    - number of entries in student   solution: 1
    - number of entries in reference solution: 1
    - 1 extra entry in student solution: '(9013, 827) -> (17963, 20777)'
    - 1 missing entry in student solution: '(8655, 29) -> (9013, 827) -> (12235, 8009) -> (17963, 20777)'

    - failed on trial 2 of 500
     4
      9013   827
      8655    29
     12235  8009
     17963 20777

  *  5 random line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (1196, 5089) -> (238, 4406)
    - reference segment 1: (238, 4406) -> (1196, 5089) -> (9818, 11236) -> (17482, 16700)

    - number of entries in student   solution: 5
    - number of entries in reference solution: 5
    - 5 extra entries in student solution, including: '(11293, 10576) -> (10041, 8688)'
    - 5 missing entries in student solution, including: '(264, 7904) -> (2238, 9184) -> (9147, 13664) -> (13095, 16224)'

    - failed on trial 1 of 250
     20
      9147 13664
      5197  5489
      1523  3862
     11293 10576
      8019 10810
      1196  5089
      4035  3298
      4865  4863
     16967 15380
     13095 16224
      8163  5856
      9818 11236
      2238  9184
     12858 12936
     10041  8688
       264  7904
     18155 16266
     17482 16700
       238  4406
      6869  7849

  * 10 random line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (14307, 9090) -> (10927, 5250)
    - reference segment 6: (8899, 2946) -> (9575, 3714) -> (10927, 5250) -> (14307, 9090)

    - number of entries in student   solution: 10
    - number of entries in reference solution: 10
    - 6 extra entries in student solution, including: '(12340, 8347) -> (12991, 8621)'
    - 6 missing entries in student solution, including: '(250, 7783) -> (1218, 7847) -> (3154, 7975) -> (7994, 8295)'

    - failed on trial 1 of 100

  * 15 random line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (9888, 9300) -> (11553, 11595)
    - reference segment 8: (3228, 120) -> (5448, 3180) -> (9888, 9300) -> (11553, 11595)

    - number of entries in student   solution: 15
    - number of entries in reference solution: 15
    - 13 extra entries in student solution, including: '(14404, 13981) -> (10928, 12501)'
    - 13 missing entries in student solution, including: '(10059, 12131) -> (10928, 12501) -> (14404, 13981) -> (15273, 14351)'

    - failed on trial 1 of 50

==> FAILED

Test 9: random line segments
  *  1 random line segment
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (8751, 5585) -> (9817, 6469)
    - reference segment 0: (4241, 1845) -> (8505, 5381) -> (8751, 5585) -> (9817, 6469)

    - number of entries in student   solution: 1
    - number of entries in reference solution: 1
    - 1 extra entry in student solution: '(8751, 5585) -> (9817, 6469)'
    - 1 missing entry in student solution: '(4241, 1845) -> (8505, 5381) -> (8751, 5585) -> (9817, 6469)'

    - failed on trial 1 of 500
     4
      8751  5585
      4241  1845
      8505  5381
      9817  6469

  *  5 random line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (10343, 261) -> (10343, 492)
    - reference segment 4: (10343, 261) -> (10343, 492) -> (10343, 5497) -> (10343, 6190)

    - number of entries in student   solution: 5
    - number of entries in reference solution: 5
    - 4 extra entries in student solution, including: '(6838, 14271) -> (3727, 14271)'
    - 4 missing entries in student solution, including: '(3727, 14271) -> (4951, 14271) -> (6838, 14271) -> (7450, 14271)'

    - failed on trial 1 of 250
     20
      7137 14020
      4603 11331
      6838 14271
      5517 13426
     10343   261
     10343  5497
      7707 14229
     11022  4640
     10254  4288
      6935 13292
     10830  4552
      7507 13773
      3899 10739
      6606  2616
      7450 14271
      4951 14271
     10343  6190
     10343   492
      6927 13943
      3727 14271

  * 10 random line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (9845, 8842) -> (10709, 10498)
    - reference segment 8: (8693, 6634) -> (9845, 8842) -> (10709, 10498) -> (10817, 10705)

    - number of entries in student   solution: 10
    - number of entries in reference solution: 10
    - 7 extra entries in student solution, including: '(12640, 12240) -> (11120, 11955)'
    - 7 missing entries in student solution, including: '(11072, 11946) -> (11120, 11955) -> (11152, 11961) -> (12640, 12240)'

    - failed on trial 1 of 100

  * 15 random line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (12257, 10528) -> (8737, 9312)
    - reference segment 1: (8737, 9312) -> (10167, 9806) -> (12257, 10528) -> (12312, 10547)

    - number of entries in student   solution: 15
    - number of entries in reference solution: 15
    - 12 extra entries in student solution, including: '(14341, 13332) -> (14341, 10782)'
    - 12 missing entries in student solution, including: '(4967, 10618) -> (5955, 11177) -> (9299, 13069) -> (9755, 13327)'

    - failed on trial 1 of 50

==> FAILED

Test 10: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt
    - failed after 7 operations involving BruteCollinearPoints
    - first and last call to segments() returned different arrays

    - sequence of operations was:
          BruteCollinearPoints collinear = new BruteCollinearPoints(points);
          collinear.segments()
          collinear.segments()
          collinear.numberOfSegments() -> 2
          collinear.numberOfSegments() -> 2
          mutate array returned by last call to segments()
          collinear.segments()

    - failed on trial 1 of 100

  * equidistant.txt
    - failed after 16 operations involving BruteCollinearPoints
    - first and last call to segments() returned different arrays

    - sequence of operations was:
          BruteCollinearPoints collinear = new BruteCollinearPoints(points);
          mutate points[] array that was passed to constructor
          collinear.numberOfSegments() -> 4
          mutate points[] array that was passed to constructor
          collinear.numberOfSegments() -> 4
          collinear.numberOfSegments() -> 4
          mutate points[] array that was passed to constructor
          collinear.segments()
          collinear.numberOfSegments() -> 4
          mutate points[] array that was passed to constructor
          collinear.segments()
          mutate array returned by last call to segments()
          collinear.numberOfSegments() -> 4
          mutate array returned by last call to segments()
          collinear.numberOfSegments() -> 4
          collinear.segments()

    - failed on trial 1 of 100

==> FAILED

Test 11: check that data type does not mutate the constructor argument
  * input8.txt
  * equidistant.txt
==> passed

Test 12: numberOfSegments() is consistent with segments()
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = horizontal5.txt
  * filename = vertical5.txt
  * filename = random23.txt
==> passed

Test 13: throws an exception if either the constructor argument is null
         or any entry in array is null
  * argument is null
  * Point[] of length 10, number of null entries = 1
  * Point[] of length 10, number of null entries = 10
  * Point[] of length 4, number of null entries = 1
  * Point[] of length 3, number of null entries = 1
  * Point[] of length 2, number of null entries = 1
  * Point[] of length 1, number of null entries = 1
==> passed

Test 14: check that the constructor throws an exception if duplicate points
  * 50 points
    - failed on trial 1 of 5
    - constructor fails to throw a java.lang.IllegalArgumentException when passed duplicate points

  * 25 points
    - failed on trial 1 of 10
    - constructor fails to throw a java.lang.IllegalArgumentException when passed duplicate points

  * 5 points
    - failed on trial 1 of 100
    - constructor fails to throw a java.lang.IllegalArgumentException when passed duplicate points
     5
      9960 22906
     32331 28247
      4987  7582
      9960 22906
     29652  1548

  * 4 points
    - failed on trial 1 of 100
    - constructor fails to throw a java.lang.IllegalArgumentException when passed duplicate points
     4
       192 23744
     23506  3557
     15490 13892
     23506  3557

  * 3 points
    - failed on trial 1 of 100
    - constructor fails to throw a java.lang.IllegalArgumentException when passed duplicate points
     3
      9170 17690
      3409 25043
      9170 17690

  * 2 points
    - failed on trial 1 of 100
    - constructor fails to throw a java.lang.IllegalArgumentException when passed duplicate points
     2
      4870 25446
      4870 25446

==> FAILED


Total: 6/17 tests passed!


================================================================
Testing correctness of FastCollinearPoints
*-----------------------------------------------------------
Running 21 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
    - student segments() returns null

  * filename = equidistant.txt
    - student segments() returns null

  * filename = input40.txt
    - student segments() returns null

  * filename = input48.txt
    - student segments() returns null

  * filename = input299.txt
    - student segments() returns null

==> FAILED

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
    - student segments() returns null

  * filename = horizontal25.txt
    - student segments() returns null

  * filename = horizontal50.txt
    - student segments() returns null

  * filename = horizontal75.txt
    - student segments() returns null

  * filename = horizontal100.txt
    - student segments() returns null

==> FAILED

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
    - student segments() returns null

    - failed on trial 1 of 500
     4
     14386 18838
     18692 18838
     11386 18838
      3158 18838

  *  5 random horizontal line segments
    - student segments() returns null

    - failed on trial 1 of 250
     20
     12955 14730
      4247 15919
      7008  4119
     13554  4119
     20850 16514
     20832  4119
     16519 14730
     19375  4989
     11811  4989
      1261 16514
     17052  4989
     15855  4119
      7179 15919
     19598 16514
     14400 15919
      1178 14730
      5950 14730
      7292  4989
     16288 16514
     19208 15919

  * 10 random horizontal line segments
    - student segments() returns null

    - failed on trial 1 of 50

  * 15 random horizontal line segments
    - student segments() returns null

    - failed on trial 1 of 5

==> FAILED

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
    - student segments() returns null

  * filename = vertical25.txt
    - student segments() returns null

  * filename = vertical50.txt
    - student segments() returns null

  * filename = vertical75.txt
    - student segments() returns null

  * filename = vertical100.txt
    - student segments() returns null

==> FAILED

Test 3b: random vertical line segments
  *  1 random vertical line segment
    - student segments() returns null

    - failed on trial 1 of 500
     4
     18307 19174
     18307  4204
     18307 19171
     18307 11940

  *  5 random vertical line segments
    - student segments() returns null

    - failed on trial 1 of 250
     20
      7717  9109
      7717  3490
      4594 16202
      6719 19291
      2130 17597
     17689  1792
      4594 10525
      6719  6263
     17689 11037
      6719 14752
      2130 14878
      4594 18270
      7717 13206
      2130 20353
      6719 11608
      4594 10069
     17689 13737
      7717 13181
      2130 14536
     17689 12057

  * 10 random vertical line segments
    - student segments() returns null

    - failed on trial 1 of 50

  * 15 random vertical line segments
    - student segments() returns null

    - failed on trial 1 of 5

==> FAILED

Test 4a: points from a file with no line segments
  * filename = random23.txt
    - student segments() returns null
    - it should return an array of length 0

  * filename = random38.txt
    - student segments() returns null
    - it should return an array of length 0

  * filename = random91.txt
    - student segments() returns null
    - it should return an array of length 0

  * filename = random152.txt
    - student segments() returns null
    - it should return an array of length 0

==> FAILED

Test 4b: random points with no line segments
  *  5 random points
    - student segments() returns null
    - it should return an array of length 0

    - failed on trial 1 of 500
     5
     15076 32563
     15472 21564
     23057 16704
     12209  3026
      6674 12932

  * 10 random points
    - student segments() returns null
    - it should return an array of length 0

    - failed on trial 1 of 250
     10
     10213 13834
     18613 24459
     19128 29980
     10996  4190
      1820  8091
      5877 11319
        18  5374
     23731 18474
      8504  2505
      3199 20482

  * 20 random points
    - student segments() returns null
    - it should return an array of length 0

    - failed on trial 1 of 100
     20
      8354 22487
     19353  3547
     31973 15137
     18848 20729
     12329 29262
      3039   180
     23004 26968
     21657  6155
      4071  4019
     11635 28404
      3028 22786
      7566 26248
       548 19509
      7960  1891
      9057 15107
      7064 26959
     22242   143
     30773  1289
      4229  3345
     25415  6951

  * 50 random points
    - student segments() returns null
    - it should return an array of length 0

    - failed on trial 1 of 10

==> FAILED

Test 5a: points from a file with 5 or more on some line segments
  * filename = input9.txt
    - student segments() returns null

  * filename = input10.txt
    - student segments() returns null

  * filename = input20.txt
    - student segments() returns null

  * filename = input50.txt
    - student segments() returns null

  * filename = input80.txt
    - student segments() returns null

  * filename = input300.txt
    - student segments() returns null

  * filename = inarow.txt
    - student segments() returns null

==> FAILED

Test 5b: points from a file with 5 or more on some line segments
  * filename = kw1260.txt
    - student segments() returns null

  * filename = rs1423.txt
    - student segments() returns null

==> FAILED

Test 6: points from a file with fewer than 4 points
  * filename = input1.txt
    - student segments() returns null
    - it should return an array of length 0

  * filename = input2.txt
    - student segments() returns null
    - it should return an array of length 0

  * filename = input3.txt
    - student segments() returns null
    - it should return an array of length 0

==> FAILED

Test 7: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
    - student segments() returns null

  * filename = input40.txt
    - student segments() returns null

  * filename = input48.txt
    - student segments() returns null

  * filename = input299.txt
    - student segments() returns null

==> FAILED

Test 8: check for fragile dependence on return value of toString()
  * filename = equidistant.txt
    - student segments() returns null

  * filename = input40.txt
    - student segments() returns null

  * filename = input48.txt
    - student segments() returns null


It is bad style to write code that depends on the particular format of
the output from the toString() method, especially if your reason for
doing so is to circumvent the public API (which intentionally does not
provide access to the x- and y-coordinates).

==> FAILED

Test 9: random line segments, none vertical or horizontal
  *  1 random line segment
    - student segments() returns null

    - failed on trial 1 of 500
     4
      7228 12963
      9740 15251
       320  6671
     12880 18111

  *  5 random line segments
    - student segments() returns null

    - failed on trial 1 of 500
     20
     11034  8990
      8202  3646
       275 10084
      9049 10356
     15408 15895
      8818  8526
      7817   596
      2347 11211
      8862   815
     12438 10774
     18685  9441
      3592  4303
      1163 10567
     10413  2177
     15948 15234
     18168  8987
      5011 12660
      8928  6314
      9078  9685
      5702  6373

  * 25 random line segments
    - student segments() returns null

    - failed on trial 1 of 100

  * 50 random line segments
    - student segments() returns null

    - failed on trial 1 of 15

  * 100 random line segments
    - student segments() returns null

    - failed on trial 1 of 2

==> FAILED

Test 10: random line segments
  *  1 random line segment
    - student segments() returns null

    - failed on trial 1 of 500
     4
     11190  9983
     12270 10055
      8130  9779
     13080 10109

  *  5 random line segments
    - student segments() returns null

    - failed on trial 1 of 500
     20
      5079  4375
      4756  4462
      2680  3182
      5013  4305
      9169 10768
      8589 13486
      5541  4865
      6894  5289
      8001  9440
      8589 14636
      8589 13161
      3464  3574
      6065  5397
      8589 14436
      6979  8278
       987    35
     10191 11930
      6404  5044
      5449  4957
      4140  4022

  * 25 random line segments
    - student segments() returns null

    - failed on trial 1 of 100

  * 50 random line segments
    - student segments() returns null

    - failed on trial 1 of 15

  * 100 random line segments
    - student segments() returns null

    - failed on trial 1 of 2

==> FAILED

Test 11: random distinct points in a given range
  * 5 random points in a 10-by-10 grid
    - student segments() returns null
    - it should return an array of length 0

    - failed on trial 1 of 500
     5
         8     3
         9     9
         8     9
         2     3
         8     6

  * 10 random points in a 10-by-10 grid
    - student segments() returns null
    - it should return an array of length 0

    - failed on trial 1 of 500
     10
         9     3
         0     1
         8     2
         2     5
         5     8
         7     0
         3     3
         0     8
         9     9
         7     2

  * 50 random points in a 10-by-10 grid
    - student segments() returns null

    - failed on trial 1 of 100

  * 90 random points in a 10-by-10 grid
    - student segments() returns null

    - failed on trial 1 of 50

  * 200 random points in a 50-by-50 grid
    - student segments() returns null

    - failed on trial 1 of 10

==> FAILED

Test 12: m*n points on an m-by-n grid
  * 3-by-3 grid
    - student segments() returns null
    - it should return an array of length 0

  * 4-by-4 grid
    - student segments() returns null

  * 5-by-5 grid
    - student segments() returns null

  * 10-by-10 grid
    - student segments() returns null

  * 20-by-20 grid
    - student segments() returns null

  * 5-by-4 grid
    - student segments() returns null

  * 6-by-4 grid
    - student segments() returns null

  * 10-by-4 grid
    - student segments() returns null

  * 15-by-4 grid
    - student segments() returns null

  * 25-by-4 grid
    - student segments() returns null

==> FAILED

Test 13: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt
    java.lang.NullPointerException

    TestFastCollinearPoints.testImmutable(TestFastCollinearPoints.java:525)
    TestFastCollinearPoints.testImmutable(TestFastCollinearPoints.java:578)
    TestFastCollinearPoints.test13(TestFastCollinearPoints.java:593)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:826)

    - sequence of operations was:
          FastCollinearPoints collinear = new FastCollinearPoints(points);
          collinear.segments()
    - failed on trial 1 of 100

  * equidistant.txt
    java.lang.NullPointerException

    TestFastCollinearPoints.testImmutable(TestFastCollinearPoints.java:525)
    TestFastCollinearPoints.testImmutable(TestFastCollinearPoints.java:578)
    TestFastCollinearPoints.test13(TestFastCollinearPoints.java:594)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:826)

    - sequence of operations was:
          FastCollinearPoints collinear = new FastCollinearPoints(points);
          collinear.numberOfSegments() -> 0
          collinear.numberOfSegments() -> 0
          mutate points[] array that was passed to constructor
          collinear.segments()
    - failed on trial 1 of 100

==> FAILED

Test 14: check that data type does not mutate the constructor argument
  * input8.txt
  * equidistant.txt
==> passed

Test 15: numberOfSegments() is consistent with segments()
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = horizontal5.txt
  * filename = vertical5.txt
  * filename = random23.txt
==> passed

Test 16: throws an exception if either constructor argument is null
         or any entry in array is null
  * argument is null
    - constructor fails to throw an exception
     0

  * Point[] of length 10, number of null entries = 1
    - constructor fails to throw an exception
     10
      1515  6238
      6494  6802
     10567 19986
     30724  5894
     23162  9326
     20316  6233
     null
     25865  4610
     14438 28222
      8405 13434

  * Point[] of length 10, number of null entries = 10
    - constructor fails to throw an exception
     10
     null
     null
     null
     null
     null
     null
     null
     null
     null
     null

  * Point[] of length 4, number of null entries = 1
    - constructor fails to throw an exception
     4
      6213 24199
     null
      1625 25191
     22815 21642

  * Point[] of length 3, number of null entries = 1
    - constructor fails to throw an exception
     3
     null
      2876 24054
     26873  4123

  * Point[] of length 2, number of null entries = 1
    - constructor fails to throw an exception
     2
     null
     10295 18018

  * Point[] of length 1, number of null entries = 1
    - constructor fails to throw an exception
     1
     null

==> FAILED

Test 17: check that the constructor throws an exception if duplicate points
  * 50 points
    - failed on trial 1 of 5
    - constructor fails to throw a java.lang.IllegalArgumentException when passed duplicate points


  * 25 points
    - failed on trial 1 of 10
    - constructor fails to throw a java.lang.IllegalArgumentException when passed duplicate points


  * 5 points
    - failed on trial 1 of 100
    - constructor fails to throw a java.lang.IllegalArgumentException when passed duplicate points

     5
      4191 22181
     31392 29180
      4744  3390
      4744  3390
      1778  8286

  * 4 points
    - failed on trial 1 of 100
    - constructor fails to throw a java.lang.IllegalArgumentException when passed duplicate points

     4
      5255 12743
     16811  6122
     16811  6122
     28664  5100

  * 3 points
    - failed on trial 1 of 100
    - constructor fails to throw a java.lang.IllegalArgumentException when passed duplicate points

     3
     10357  2667
     10357  2667
     18117  6934

  * 2 points
    - failed on trial 1 of 100
    - constructor fails to throw a java.lang.IllegalArgumentException when passed duplicate points

     2
     16088 30915
     16088 30915

==> FAILED


Total: 2/21 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Point
*-----------------------------------------------------------
Running 1 total tests.

The maximum amount of memory per Point object is 32 bytes.

Student memory = 24 bytes (passed)

Total: 1/1 tests passed!

================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing BruteCollinearPoints
*-----------------------------------------------------------
Running 10 total tests.

Test 1a-1e: Find collinear points among n random distinct points


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    16   0.00        3640           0           3640                    0         
=> passed    32   0.00       71920           0          71920                    0         
=> passed    64   0.01     1270752           0        1270752                    0         
=> passed   128   0.13    21336000           0       21336000                    0         
=> passed   256   1.00   349585280           0      349585280                    0         
==> 5/5 tests passed

Test 2a-2e: Find collinear points among n/4 arbitrary line segments


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    16   0.00        3728           0           3728                    0         
=> passed    32   0.00       72324           0          72324                    0         
=> passed    64   0.01     1272706           0        1272706                    0         
=> passed   128   0.13    21343858           0       21343858                    0         
=> passed   256   1.75   349617918           0      349617918                    0         
==> 5/5 tests passed

Total: 10/10 tests passed!


================================================================



Timing FastCollinearPoints
*-----------------------------------------------------------
Running 31 total tests.

Test 1a-1g: Find collinear points among n random distinct points


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
    java.lang.NullPointerException

    TimeFastCollinearPoints.timingTest(TimeFastCollinearPoints.java:94)
    TimeFastCollinearPoints.time(TimeFastCollinearPoints.java:221)
    TimeFastCollinearPoints.timeRandomPoints(TimeFastCollinearPoints.java:130)
    TimeFastCollinearPoints.main(TimeFastCollinearPoints.java:271)

Test 2a-2g: Find collinear points among the n points on an n-by-1 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
    java.lang.NullPointerException

    TimeFastCollinearPoints.timingTest(TimeFastCollinearPoints.java:94)
    TimeFastCollinearPoints.time(TimeFastCollinearPoints.java:221)
    TimeFastCollinearPoints.timeGrid1(TimeFastCollinearPoints.java:154)
    TimeFastCollinearPoints.main(TimeFastCollinearPoints.java:275)

Test 3a-3g: Find collinear points among the n points on an n/4-by-4 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
    java.lang.NullPointerException

    TimeFastCollinearPoints.timingTest(TimeFastCollinearPoints.java:94)
    TimeFastCollinearPoints.time(TimeFastCollinearPoints.java:221)
    TimeFastCollinearPoints.timeGrid4(TimeFastCollinearPoints.java:178)
    TimeFastCollinearPoints.main(TimeFastCollinearPoints.java:279)

Test 4a-4g: Find collinear points among the n points on an n/8-by-8 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
    java.lang.NullPointerException

    TimeFastCollinearPoints.timingTest(TimeFastCollinearPoints.java:94)
    TimeFastCollinearPoints.time(TimeFastCollinearPoints.java:221)
    TimeFastCollinearPoints.timeGrid8(TimeFastCollinearPoints.java:203)
    TimeFastCollinearPoints.main(TimeFastCollinearPoints.java:283)

Total: 0/31 tests passed!


================================================================

